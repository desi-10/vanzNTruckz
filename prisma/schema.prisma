generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")   
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  SUB_ADMIN
  CUSTOMER
  DRIVER
}

enum DispatchStatus {
  ASSIGNED
  IN_TRANSIT
  DELIVERED
}

enum BidStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELED
}

enum PaymentOption {
  CASH
  CARD
  MOBILE_MONEY
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum KycStatus {
  PENDING
  APPROVED
  REJECTED
}

enum InboxType {
  BID
  ORDER
  DISPATCH
  DELIVERY
  PICKUP
  RETURN
  CANCEL
}

model User {
  id                    String                @id @default(cuid())
  name                  String
  phone                 String?               @unique
  email                 String?               @unique
  address               String?
  emailVerified         DateTime?
  phoneVerified         DateTime?
  image                 Json?
  password              String?
  role                  UserRole              @default(CUSTOMER)
  isTwoFactorEnabled    Boolean               @default(false)
  twoFactorConfirmation TwoFactorConfimation?

  accounts      Account[]
  orders        Order[]
  driverProfile Driver?
  transactions  Transaction[]
  inbox         Inbox[]

}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String?
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  otp     String   @unique
  expires DateTime

  @@unique([email, otp])
}

model PhoneOTP {
  id      String   @id @default(cuid())
  phone   String   @unique
  otp     String   @unique
  expires DateTime

  @@unique([phone, otp])
}

model EmailOTP {
  id      String   @id @default(cuid())
  email   String   @unique
  otp     String   @unique
  expires DateTime

  @@unique([email, otp])
}

model TwoFactorConfimation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Driver {
  userId             String   @id
  license            String?  @unique
  vehicleType        String?
  isActive           Boolean  @default(true)

  profilePicture     Json?    // Store { url, id } object
  carPicture        Json?
  numberPlate       String?   @unique
  numberPlatePicture Json?
  licensePicture    Json?
  licenseExpiry     DateTime?
  roadworthySticker Json?
  roadworthyExpiry  DateTime?
  insuranceSticker  Json?
  insurance         String?
  ghanaCard        String?
  ghanaCardPicture Json?
  kycStatus        KycStatus @default(PENDING)

  orders     Order[]
  dispatches Dispatch[]
  bids       Bid[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model Dispatch {
  id       String         @id @default(cuid())
  orderId  String         @unique
  driverId String
  status   DispatchStatus @default(ASSIGNED)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order  Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  driver Driver @relation(fields: [driverId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
}

model Order {
  id                String       @id @default(cuid())
  customerId        String
  driverId          String?
  couponId          String?
  vehicleId         String
  
  pickUpPoint            String
  dropOffPoint           String
  parcelType        String
  pieces            Int
  imageOne          Json?
  imageTwo          Json?
  recepientName     String
  recepientNumber   String
  additionalInfo    String?
  
  BaseCharges       Decimal
  distanceCharges   Decimal
  timeCharges       Decimal
  AdditionalCharges Decimal?
  totalEstimatedFare Decimal

  paymentMethod     Json?
  status            OrderStatus  @default(PENDING)
  transaction       Transaction?
  dispatch          Dispatch?
  driverSnapshot    Json?

  bids             Bid[]
  inbox            Inbox[]

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  coupon            Coupon?      @relation(fields: [couponId], references: [id])
  vehicleType      VehicleType @relation(fields: [vehicleId], references: [id])
  customer         User     @relation(fields: [customerId], references: [id])
  driver           Driver?  @relation(fields: [driverId], references: [userId])
}


model Transaction {
  id            String        @id @default(cuid())
  orderId       String        @unique
  customerId    String
  amount        Float
  paymentMethod PaymentOption @default(CASH)
  status        PaymentStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order    Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  customer User  @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model Bid {
  id       String    @id @default(cuid())
  orderId  String
  driverId String
  amount   Float?
  status   BidStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order  Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  driver Driver @relation(fields: [driverId], references: [userId], onDelete: Cascade)
}

model Pricing {
  id          String  @id @default(cuid())
  serviceType String  @unique
  baseFare    Float
  perKmRate   Float
  perMinRate  Float
  isActive    Boolean @default(true)



  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Inbox {
  id      String    @id @default(cuid())
  userId  String
  orderId String?
  message String
  isRead  Boolean   @default(false)
  type    InboxType @default(BID)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order Order? @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user  User   @relation(fields: [userId], references: [id])
}


model Coupon {
  id        String    @id @default(cuid())
  code      String
  amount    Decimal
  discount  Decimal
  isActive  Boolean   @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]
}


model VehicleType {
  id        String   @id @default(cuid())
  name      String
  weight    Float
  isActive  Boolean  @default(true)

  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
