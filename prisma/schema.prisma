generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL") 
}


enum UserRole {
  SUPER_ADMIN
  ADMIN
  SUB_ADMIN
  CUSTOMER
  DRIVER
}

enum DispatchStatus {
  ASSIGNED
  IN_TRANSIT
  DELIVERED
}

enum BillStatus {
  PENDING
  CONFIRMED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELED
}

enum PaymentOption {
  CASH
  CARD
  MOBILE_MONEY
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model User {
  id                    String                @id @default(cuid())
  name                  String
  phone                 String?               @unique // Added phone field
  email                 String?               @unique
  address               String?
  emailVerified         DateTime?
  phoneVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole              @default(CUSTOMER)
  isTwoFactorEnabled    Boolean               @default(false)
  accounts              Account[]
  twoFactorConfirmation TwoFactorConfimation?
  orders                Order[] // Customer orders
  driverProfile         Driver? // If user is a driver
  transactions          Transaction[] // Payments made by customer
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String?
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  otp     String   @unique
  expires DateTime

  @@unique([email, otp])
}

model PhoneOTP {
  id      String   @id @default(cuid())
  phone   String   @unique
  otp     String   @unique
  expires DateTime

  @@unique([phone, otp])
}

model EmailOTP {
  id      String   @id @default(cuid())
  email   String   @unique
  otp     String   @unique
  expires DateTime

  @@unique([email, otp])
}

model TwoFactorConfimation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Driver {
  userId      String     @id
  license     String?    @unique
  vehicleType String?
  status      Boolean    @default(true) // Active or inactive
  orders      Order[] // Orders assigned to driver
  dispatches  Dispatch[] // Dispatches assigned to driver
  bills       Bill[] // Bills generated by driver

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Dispatch {
  id       String         @id @default(cuid())
  orderId  String         @unique
  driverId String
  status   DispatchStatus @default(ASSIGNED) // Can be ASSIGNED, IN_TRANSIT, DELIVERED, etc.

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order  Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  driver Driver @relation(fields: [driverId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
}

model Order {
  id          String       @id @default(cuid())
  customerId  String
  driverId    String?
  priceId     String?
  finalPrice  Float?
  status      OrderStatus  @default(PENDING)
  bill        Bill[]
  transaction Transaction?
  dispatch    Dispatch?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customer User     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  driver   Driver?  @relation(fields: [driverId], references: [userId], onDelete: SetNull)
  price    Pricing? @relation(fields: [priceId], references: [id], onDelete: Restrict)
}


model Transaction {
  id            String        @id @default(cuid())
  orderId       String        @unique
  customerId    String
  amount        Float
  paymentMethod PaymentOption @default(CASH)
  status        PaymentStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order    Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  customer User  @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model Bill {
  id      String     @id @default(cuid())
  orderId String     @unique
  driverId String
  amount  Float
  status  BillStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  driver  Driver     @relation(fields: [driverId], references: [userId], onDelete: Cascade)
}

model Pricing {
  id          String  @id @default(cuid())
  serviceType String  @unique
  baseFare    Float
  perKmRate   Float
  perMinRate  Float
  isActive    Boolean @default(true) // Mark outdated pricing as inactive
  orders      Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
